Git is a version control system.
Git helps you keep track of code changes.
Git is used to collaborate on code.

---Learning by Examples----

commands
-----------------------------------
git --version 

result: git version dekhabe
-----------------------------------

----Git and GitHub Introduction----

  What is Git?

  Git is a popular version control system. It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.

  It is used for:
    > Tracking code changes
    > Tracking who made changes
    > Coding collaboration

  What does Git do?
    > Manage projects with Repositories
    > Clone a project to work on a local copy
    > Control and track changes with Staging and Committing
    > Branch and Merge to allow for work on different parts and versions of a project
    > Pull the latest version of the project to a local copy
    > Push local updates to the main project

  Working with Git
    > Initialize Git on a folder, making it a Repository
    > Git now creates a hidden folder to keep track of changes in that folder
    > When a file is changed, added or deleted, it is considered modified
    > You select the modified files you want to Stage
    > The Staged files are Committed, which prompts Git to store a permanent snapshot of the files
    > Git allows you to see the full history of every commit.
    > You can revert back to any previous commit.
    > Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!

  Why Git?
    > Over 70% of developers use Git!
    > Developers can work together from anywhere in the world.
    > Developers can see the full history of the project.
    > Developers can revert to earlier versions of a project.

  What is GitHub?
    > Git is not the same as GitHub.
    > GitHub makes tools that use Git.
    > GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.
    > In this tutorial, we will focus on using Git with GitHub.

--------------
Configure Git
-----------------------------------------------------------------------------------
commands:

git config --global user.name "javascript-project-test"

result: Change the user name to your own
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
commands:

git config --global user.email "gantabyakprottoy96@gmail.com"

git config user.email "gantabyakprottoy96@gmail.com"            //If it will Current repository, no need global

result: Change the user e-mail address to your own
------------------------------------------------------------------------------------
Note: Use global to set the username and e-mail for every repository on your computer.
If you want to set the username/e-mail for just the current repo, you can remove global
-------------

-------------------
Creating Git Folder
-----------------------------------------------------------------------------------
commands:

mkdir myproject

result: mkdir makes a new directory
------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
commands:

cd myproject

result: cd changes the current working directory
------------------------------------------------------------------------------------
Note: If you already have a folder/directory you would like to use for Git:
Navigate to it in command line, or open it in your file explorer, right-click and select "Git Bash here"

--------------
Initialize Git
-----------------------------------------------------------------------------------
commands:

git init

result: Initialized empty Git repository in D:/Javascript Practise/.git/
------------------------------------------------------------------------------------
Note: Git now knows that it should watch the folder you initiated it on.
Git creates a hidden folder to keep track of changes.

Git Adding New Files
  > You just created your first local Git repo. But it is empty.
  > So let's add some files, or create a new file using your favourite text editor. Then save or move it to the    folder you just created.

-----------------------------------------------------------------------------------
command:

ls

result: will list the files in the directory.
------------------------------------------------------------------------------------

Then we check the Git status and see if it is a part of our repo
-----------------------------------------------------------------------------------
command:

git status

result: Changes to be committed:, Changes not staged for commit:, Untracked files:, and branch will show.
------------------------------------------------------------------------------------

Now Git is aware of the file, but has not added it to our repository!

Files in your Git repository folder can be in one of 2 states:
  > Tracked - files that Git knows about and are added to the repository
  > Untracked - files that are in your working directory, but not added to the repository

When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment.

Git Staging Environment
  One of the core functions of Git is the concepts of the Staging Environment, and the Commit.
  As you are working, you may be adding, editing and removing files. But whenever you hit a milestone or finish a part of the work, you should add the files to a Staging Environment.
  Staged files are files that are ready to be committed to the repository you are working on. You will learn more about commit shortly.

-------------
Git Add file
-----------------------------------------------------------------------------------
command:

git add index.html

result: index.html file added with local repository (the file has been added to the Staging Environment)
------------------------------------------------------------------------------------

--------------------------
Git Add More than One File
-----------------------------------------------------------------------------------
command:

git add --all   or   git add -A   

result: all files are added to the Staging Environment, and we are ready to do our first commit
------------------------------------------------------------------------------------

Note: The shorthand command for git add --all is git add -A


Git Commit
  Since we have finished our work, we are ready move from stage to commit for our repo.

  Adding commits keep track of our progress and changes as we work.
  Git considers each commit change point or "save point".
  It is a point in the project you can go back to if you find a bug, or want to make a change.

  When we commit, we should always include a message.
-----------------------------------------------------------------------------------
command:

git commit -m "First Commit"   

result: [master (root-commit) 33c25a4] First Commit
------------------------------------------------------------------------------------

The commit command performs a commit, and the -m "message" adds a message.

The Staging Environment has been committed to our repo, with the message:
"First release of Hello World!"

Git Commit without Stage
  Sometimes, when you make small changes, using the staging environment seems like a waste of time.
  It is possible to commit changes directly, skipping the staging environment.
  The -a option will automatically stage every changed, already tracked file.

  Let's add a small update to index.html:

    <h3>New Line</h3>

And check the status of our repository. But this time, we will use the --short option to see the changes in a more compact way:
-----------------------------------------------------------------------------------
command:

git status --short   

result: We see the midified files list
------------------------------------------------------------------------------------
Note: Short status flags are:

  ?? - Untracked files
  A - Files added to stage
  M - Modified files
  D - Deleted files

We see the file we expected is modified. So let's commit it directly:
-----------------------------------------------------------------------------------
command:

git commit -a -m "Upfated index.html & git.txt file"   

result: commit changes directly, skipping the staging environment.
------------------------------------------------------------------------------------

Warning: Skipping the Staging Environment is not generally recommended.

Skipping the stage step can sometimes make you include unwanted changes.

দেখুন branch নিয়ে কাজ করা কতটা easy? এবং কিভাবে এই আপনি different things work করতে পারবেন?

Emergency Branch
  Now imagine that we are not yet done with second-branch, but we need to fix an error on master.
  I don't want to mess with master directly, and I do not want to mess with second-branch, since it is not done yet.

  So we create a new branch to deal with the emergency:
-----------------------------------------------------------------------------------
command:

git checkout -b emergency-fix   

result: Switched to a new branch 'emergency-fix' (Emergency Branch)
------------------------------------------------------------------------------------
Now we have created a new branch from master, and changed to it. We can safely fix the error without disturbing the other branches.

We have made changes in this file, and we need to get those changes to the master branch.

Now we have a fix ready for master, and we need to merge the two branches.

Git Branch Merge
  We have the emergency fix ready, and so let's merge the master and emergency-fix branches.
  First, we need to change to the master branch:

-----------------------------------------------------------------------------------
command:

git merge emergency-fix   

result: Changed up to date file from emergency-fix branch to master branch
------------------------------------------------------------------------------------

Since the emergency-fix branch came directly from master, and no other changes had been made to master while we were working, Git sees this as a continuation of master. So it can "Fast-forward", just pointing both master and emergency-fix to the same commit.

যেহেতু মাস্টার এবং ইমার্জেন্সি-ফিক্স এখন মূলত একই, আমরা ইমার্জেন্সি-ফিক্স মুছে দিতে পারি, কারণ এটির আর প্রয়োজন নেই:
-----------------------------------------------------------------------------------
command:

git branch -d emergency-fix   

result: Deleted branch emergency-fix (was 47b4504). (Emergency Branch)
------------------------------------------------------------------------------------

Merge Conflict
Now we can move over to hello-world-images and keep working. Add another image file (img_hello_git.jpg) and change index.html, so it shows it: