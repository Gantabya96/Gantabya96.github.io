Git is a version control system.
Git helps you keep track of code changes.
Git is used to collaborate on code.

---Learning by Examples----

commands
-----------------------------------
git --version 

result: git version dekhabe
-----------------------------------

----Git and GitHub Introduction----

  What is Git?

  Git is a popular version control system. It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.

  It is used for:
    > Tracking code changes
    > Tracking who made changes
    > Coding collaboration

  What does Git do?
    > Manage projects with Repositories
    > Clone a project to work on a local copy
    > Control and track changes with Staging and Committing
    > Branch and Merge to allow for work on different parts and versions of a project
    > Pull the latest version of the project to a local copy
    > Push local updates to the main project

  Working with Git
    > Initialize Git on a folder, making it a Repository
    > Git now creates a hidden folder to keep track of changes in that folder
    > When a file is changed, added or deleted, it is considered modified
    > You select the modified files you want to Stage
    > The Staged files are Committed, which prompts Git to store a permanent snapshot of the files
    > Git allows you to see the full history of every commit.
    > You can revert back to any previous commit.
    > Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!

  Why Git?
    > Over 70% of developers use Git!
    > Developers can work together from anywhere in the world.
    > Developers can see the full history of the project.
    > Developers can revert to earlier versions of a project.

  What is GitHub?
    > Git is not the same as GitHub.
    > GitHub makes tools that use Git.
    > GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.
    > In this tutorial, we will focus on using Git with GitHub.

--------------
Configure Git
-----------------------------------------------------------------------------------
commands:

git config --global user.name "javascript-project-test"

result: Change the user name to your own
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
commands:

git config --global user.email "gantabyakprottoy96@gmail.com"

git config user.email "gantabyakprottoy96@gmail.com"            //If it will Current repository, no need global

result: Change the user e-mail address to your own
------------------------------------------------------------------------------------
Note: Use global to set the username and e-mail for every repository on your computer.
If you want to set the username/e-mail for just the current repo, you can remove global
-------------

-------------------
Creating Git Folder
-----------------------------------------------------------------------------------
commands:

mkdir myproject

result: mkdir makes a new directory
------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
commands:

cd myproject

result: cd changes the current working directory
------------------------------------------------------------------------------------
Note: If you already have a folder/directory you would like to use for Git:
Navigate to it in command line, or open it in your file explorer, right-click and select "Git Bash here"

--------------
Initialize Git
-----------------------------------------------------------------------------------
commands:

git init

result: Initialized empty Git repository in D:/Javascript Practise/.git/
------------------------------------------------------------------------------------
Note: Git now knows that it should watch the folder you initiated it on.
Git creates a hidden folder to keep track of changes.

Git Adding New Files
  > You just created your first local Git repo. But it is empty.
  > So let's add some files, or create a new file using your favourite text editor. Then save or move it to the    folder you just created.

-----------------------------------------------------------------------------------
command:

ls

result: will list the files in the directory.
------------------------------------------------------------------------------------

Then we check the Git status and see if it is a part of our repo
-----------------------------------------------------------------------------------
command:

git status

result: Changes to be committed:, Changes not staged for commit:, Untracked files:, and branch will show.
------------------------------------------------------------------------------------

Now Git is aware of the file, but has not added it to our repository!

Files in your Git repository folder can be in one of 2 states:
  > Tracked - files that Git knows about and are added to the repository
  > Untracked - files that are in your working directory, but not added to the repository

When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment.

Git Staging Environment
  One of the core functions of Git is the concepts of the Staging Environment, and the Commit.
  As you are working, you may be adding, editing and removing files. But whenever you hit a milestone or finish a part of the work, you should add the files to a Staging Environment.
  Staged files are files that are ready to be committed to the repository you are working on. You will learn more about commit shortly.

-------------
Git Add file
-----------------------------------------------------------------------------------
command:

git add index.html

result: index.html file added with local repository (the file has been added to the Staging Environment)
------------------------------------------------------------------------------------

--------------------------
Git Add More than One File
-----------------------------------------------------------------------------------
command:

git add --all   or   git add -A   

result: all files are added to the Staging Environment, and we are ready to do our first commit
------------------------------------------------------------------------------------

Note: The shorthand command for git add --all is git add -A


Git Commit
  Since we have finished our work, we are ready move from stage to commit for our repo.

  Adding commits keep track of our progress and changes as we work.
  Git considers each commit change point or "save point".
  It is a point in the project you can go back to if you find a bug, or want to make a change.

  When we commit, we should always include a message.
-----------------------------------------------------------------------------------
command:

git commit -m "First Commit"   

result: [master (root-commit) 33c25a4] First Commit
------------------------------------------------------------------------------------

The commit command performs a commit, and the -m "message" adds a message.

The Staging Environment has been committed to our repo, with the message:
"First release of Hello World!"

Git Commit without Stage
  Sometimes, when you make small changes, using the staging environment seems like a waste of time.
  It is possible to commit changes directly, skipping the staging environment.
  The -a option will automatically stage every changed, already tracked file.

  Let's add a small update to index.html:

    <h3>New Line</h3>

And check the status of our repository. But this time, we will use the --short option to see the changes in a more compact way:
-----------------------------------------------------------------------------------
command:

git status --short   

result: We see the midified files list
------------------------------------------------------------------------------------
Note: Short status flags are:

  ?? - Untracked files
  A - Files added to stage
  M - Modified files
  D - Deleted files

We see the file we expected is modified. So let's commit it directly:
-----------------------------------------------------------------------------------
command:

git commit -a -m "Upfated index.html & git.txt file"   

result: commit changes directly, skipping the staging environment.
------------------------------------------------------------------------------------

Warning: Skipping the Staging Environment is not generally recommended.

Skipping the stage step can sometimes make you include unwanted changes.

If needed index.lock or any file forcely remove:
----------------------------------------Start-----------------------------------------------
command:

rm -f ./.git/index.lock   

result: Will remove index.lock forcely (You can face this problem when you commit message)
-----------------------------------------End------------------------------------------------

Git Commit Log
To view the history of commits for a repository, you can use the log command:
----------------------------------------Start-----------------------------------------------
command:

git log   

result: commit 2b6126c67d6b86adacc7e2614924b3fce249cd3b (HEAD -> master)
        Author: gantabya <gantabyakprottoy96@gmail.com>
        Date:   Fri Aug 18 15:23:33 2023 +0600

          Upfated index.html & git.txt file

        commit 33c25a4eda2ca650dba0df8eb87a8b24650783e5
        Author: gantabya <gantabyakprottoy96@gmail.com>
        Date:   Fri Aug 18 14:25:16 2023 +0600

           First Commit
-----------------------------------------End------------------------------------------------

Git Help
  If you are having trouble remembering commands or options for commands, you can use Git help.
  There are a couple of different ways you can use the help command in command line:
    ----------------------------------------Start-----------------------------------------------
    command:
      1. git commit -help    //(See all the available options for the specific command)//
      2. git help --all      //(See all possible commands)//

    Result: all command and description will show
    -----------------------------------------End------------------------------------------------


----------------------------------------Start-----------------------------------------------------------------------

command:

git commit -help

Note: You can also use --help instead of -help to open the relevant Git manual page

result: usage: git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
                  [--dry-run] [(-c | -C | --squash) <commit> | --fixup [(amend|reword):]<commit>]
                  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
                  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
                  [--date=<date>] [--cleanup=<mode>] [--[no-]status]
                  [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]
                  [(--trailer <token>[(=|:)<value>])...] [-S[<keyid>]]
                  [--] [<pathspec>...]
        
      -q, --quiet           suppress summary after successful commit
      -v, --verbose         show diff in commit message template

      Commit message options
         -F, --file <file>               read message from file
         --author <author>               override author for commit 
         --date <date>                   override date for commit
         -m, --message <message>         commit message
         -c, --reedit-message <commit>   reuse and edit message from specified commit
         -C, --reuse-message <commit>    reuse message from specified commit
      --fixup [(amend|reword):]commit    use autosquash formatted message to fixup or amend/reword specified commit
         --squash <commit>               use autosquash formatted message to squash specified commit
         --reset-author                  the commit is authored by me now (used with -C/-c/--amend)
         --trailer <trailer>             add custom trailer(s)
         -s, --signoff                   add a Signed-off-by trailer
         -t, --template <file>           use specified template file
         -e, --edit                      force edit of commit
         --cleanup <mode>                how to strip spaces and #comments from message
         --status                        include status in commit message template
         -S, --gpg-sign[=<key-id>]       GPG sign commit

    Commit contents options:
         -a, --all                       commit all changed files
         -i, --include                   add specified files to index for commit
         --interactive                   interactively add files
         -p, --patch                     interactively add changes
         -o, --only                      commit only specified files
         -n, --no-verify                 bypass pre-commit and commit-msg hooks
         --dry-run                       show what would be committed
         --short                         show status concisely
         --branch                        show branch information
         --ahead-behind                  compute full ahead/behind values
         --porcelain                     machine-readable output
         --long                          show status in long format (default)
         -z, --null                      terminate entries with NUL
         --amend                         amend previous commit
         --no-post-rewrite               bypass post-rewrite hook
    -u, --untracked-files[=<mode>]       show untracked files, optional modes: all, normal, no. (Default: all)
    --pathspec-from-file <file>          read pathspec from file
    --pathspec-file-nul              with --pathspec-from-file, pathspec elements are separated with NUL character

-----------------------------------------End-----------------------------------------------------------------------
-------------------------------------------------------------------
If you use 
            git help -all command
                                    will see you all command of Git.
--------------------------------------------------------------------

Git Branch
  Git-এ, একটি Branch হল main repository এর একটি new/Separate version ।
  ধরা যাক(Let's say) আপনার একটি large project রয়েছে এবং আপনাকে এটির design update করতে হবে।

  এটি কীভাবে Git ছাড়া এবং এর সাথে কাজ করবে:

  Git ছাড়া:
    > live version এ প্রভাব এড়াতে(avoid impacting) সমস্ত প্রাসঙ্গিক ফাইলের(all the relevant files) Copy তৈরি করুন
    > Start working with the design and সেই Code টি অন্যান্য file এর code এর উপর নির্ভর করে দেখুন, এটিও(that also) change করা দরকার!
    > নির্ভরশীল file গুলির copy তৈরি করুন। প্রতিটি file নির্ভরতা(dependency) সঠিক ফাইলের নাম উল্লেখ(references) করে তা নিশ্চিত করা
    > EMERGENCY! project এর অন্য কোথাও(somewhere else) একটি অসংলগ্ন(unrelated) error রয়েছে যা শীঘ্রই fixed করা দরকার!
    > আপনার(your) all files save করুন, আপনি যে copy গুলিতে কাজ করছেন তার নামের একটি note তৈরি করুন
    > Work on the unrelated error and এটি fix করতে code update করুন
    > Go back to the design, and finish the work there
    > Copy the code or rename the files, যাতে update করা design টি live version এ থাকে
    > (2 weeks later, আপনি বুঝতে(realize) পারবেন যে নতুন ডিজাইন সংস্করণে unrelated error টি fix করা হয়নি because আপনি fix করার আগে file গুলি copy করেছেন)

  With Git:
    > New-design নামে একটি নতুন branch এর সাথে, main branch কে impact না করে direct code টি edit করুন
    > EMERGENCY! project এর অন্য কোথাও(somewhere else) একটি অসংলগ্ন(unrelated) error রয়েছে যা শীঘ্রই fixed করা দরকার!
    > Create a new branch from the main project called small-error-fix(ছোট-এরর-ফিক্স নামক)
    > Fix the unrelated error এবং small-error-fix branch টিকে main branch এর সাথে merge(একত্রিত) করুন
    > Go back to the new-design branch, and finish the work there
    > new-design branch টিকে main এর সাথে Merge(একীভূত) করুন (আপনি যে small error fix টি হারিয়েছিলেন(were missing) সে সম্পর্কে সতর্ক হওয়া(getting alerted))

  Branches allow you to work on different parts of a project without impacting the main branch.
  When the work is complete, a branch can be merged with the main project.
  You can even switch between branches and work on different projects without them interfering with each other.
  Branching in Git is very lightweight and fast!

New Git Branch
  Let add some new features to our index.html page.
  We are working in our local repository, and we do not want to disturb or possibly wreck the main project.
  So we create a new branch:
  ----------------------------------------Start-----------------------------------------------
  command:

  git branch second-branch  

  result: created a new branch called "second-branch"
  -----------------------------------------End------------------------------------------------

  Let's confirm that we have created a new branch:
  ----------------------------------------Start-----------------------------------------------
  command:

  git branch 

  result: * master
            second-branch
  -----------------------------------------End------------------------------------------------

We can see the new branch with the name "hello-world-images", but the * beside master specifies that we are currently on that branch.

checkout is the command used to check out a branch. Moving us from the current branch, to the one specified at the end of the command:
  ----------------------------------------Start-----------------------------------------------
  command:

  git checkout second-branch 

  result: Switched to branch 'second-branch'
  -----------------------------------------End------------------------------------------------

Now we have moved our current workspace from the master branch, to the new branch
Open your editor and make some changes.
  example, we added an h2 tag in index.html:
     <h2>for 2nd branch</h2>

We have made changes to a file and added a new file in the working directory (same directory as the main branch).

Now check the status of the current branch

So let's go through what happens here:

There are changes to our index.html, but the file is not staged for commit
<h2>for 2nd branch</h2> is not tracked
So we need to add both files to the Staging Environment for this branch:
  ----------------------------------------Start-----------------------------------------------
  command:

  git add --all

  result: added all files all changed (new, modified, and deleted) files.
  -----------------------------------------End------------------------------------------------

  Using --all instead of individual filenames will Stage all changed (new, modified, and deleted) files.

  We are happy with our changes. So we will commit them to the branch:
  ----------------------------------------Start-----------------------------------------------
  command:

  git commit -m "added h2 tag in html"

  result: added all files all changed (new, modified, and deleted) files.
  -----------------------------------------End------------------------------------------------

  Now we have a new branch, that is different from the master branch.
  
Note: Using the -b option on checkout will create a new branch, and move to it, if it does not exist

দেখুন branch নিয়ে কাজ করা কতটা easy? এবং কিভাবে এই আপনি different things work করতে পারবেন?

Emergency Branch
  Now imagine that we are not yet done with second-branch, but we need to fix an error on master.
  I don't want to mess with master directly, and I do not want to mess with second-branch, since it is not done yet.

  So we create a new branch to deal with the emergency:
-----------------------------------------------------------------------------------
command:

git checkout -b emergency-fix   

result: Switched to a new branch 'emergency-fix' (Emergency Branch)
------------------------------------------------------------------------------------
Now we have created a new branch from master, and changed to it. We can safely fix the error without disturbing the other branches.

We have made changes in this file, and we need to get those changes to the master branch.

Now we have a fix ready for master, and we need to merge the two branches.

Git Branch Merge
  We have the emergency fix ready, and so let's merge the master and emergency-fix branches.
  First, we need to change to the master branch:

-----------------------------------------------------------------------------------
command:

git merge emergency-fix   

result: Changed up to date file from emergency-fix branch to master branch
------------------------------------------------------------------------------------

Since the emergency-fix branch came directly from master, and no other changes had been made to master while we were working, Git sees this as a continuation of master. So it can "Fast-forward", just pointing both master and emergency-fix to the same commit.

যেহেতু মাস্টার এবং ইমার্জেন্সি-ফিক্স এখন মূলত একই, আমরা ইমার্জেন্সি-ফিক্স মুছে দিতে পারি, কারণ এটির আর প্রয়োজন নেই:
-----------------------------------------------------------------------------------
command:

git branch -d emergency-fix   

result: Deleted branch emergency-fix (was 47b4504). (Emergency Branch)
------------------------------------------------------------------------------------

Merge Conflict
Now we can move over to hello-world-images and keep working. Add another image file (img_hello_git.jpg) and change index.html, so it shows it:

The conflict has been fixed, and we can use commit to conclude the merge:

Now, we are done with our work here and can stage and commit for this branch:
     git add --all
     git commit -m "added new image"

We see that index.html has been changed in both branches. Now we are ready to merge second-branch into master. But what will happen to the changes we recently made in master?
      git checkout master
      git merge second-branch

CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.

The merge failed, as there is conflict between the versions for index.html. Let us check the status:
      git status

This confirms there is a conflict in index.html, but the change files are ready and staged to be committed.

So we need to fix that conflict. Open the file in our editor:

We can see the differences between the versions and edit it like we want:

Now we can stage index.html and check the status:
      git add index.html
      git status

The conflict has been fixed, and we can use commit to conclude the merge:
      git commit -m "merged with second-branch after fixing conflicts"

And delete the second-branch (Branch):
      git branch -d second-branch


Now you have a better understanding of how branches and merging works. Time to start working with a remote repository!


Git GitHub Getting Started

  First, Create a Github account. If you have an account that fine.

Note: Remember to use the same e-mail address you used in the Git config.

Create a Repository on GitHub
  Now that you have made a GitHub account, sign in, and create a new Repo:
        Check Screenshot: https://prnt.sc/bq6FTAs6yhmq

  And fill in the relevant details:
        Check Screenshot: https://prnt.sc/8ISVrnnqUIim

We will go over the different options and what they mean later. But for now, choose Public (if you want the repo to be viewable for anyone) or Private (if you want to choose who should be able to view the repo). Either way, you will be able to choose who can contribute to the repo.

Then click "Create repository".
  We will go over the different options and what they mean later. 
  কিন্তু আপাতত, choose Public (if you want the repo to be viewable for anyone) or Private (if you want to choose who should be able to view the repo). 
  যেভাবেই হোক(Either way), you will be able to choose কে(who) পারে(can) অবদান(contribute) রাখতে repo তে.

Push Local Repository থেকে(to) GitHub
  Since we have already set up a local Git repo, we are going to push that to GitHub:
           Check Screenshot: https://prnt.sc/D9VzVeDhHQqE

Copy the URL, or click the clipboard marked in the image above.
Now paste it the following command:
            Check Screenshot: https://prnt.sc/IW7HwQeJg8Md

-----------------------------------------------------------------------------------
command:

git remote add origin https://github.com/Gantabya96/my-first-practice.git   

result: git remote add origin URL specifies that you are adding a remote repository, with the specified URL, as an origin to your local Git repo.
------------------------------------------------------------------------------------

Now we are going to push our master branch to the origin url, and set it as the default remote branch:
-----------------------------------------------------------------------------------
command:

git push --set-upstream origin master  

result: Check this Screenshot: https://prnt.sc/rFpQwEp4mVvR
------------------------------------------------------------------------------------

Note: Since this is the first time you are connecting to GitHub, you will get some kind of notification you to authenticate this connection.

Now, go back into GitHub and see that the repository has been updated:
        Check Screenshot: https://prnt.sc/X7krf5rwtuKP

Edit Code in GitHub
  In addition to being a host for Git content, GitHub has a very good code editor.
  Let's try to edit the README.md file in GitHub. Just click the edit button:
        Screenshot: https://prnt.sc/G-T6qjOsPcwa

Add some changes to the code, and then commit the changes. For now, we will "Commit directly to the master branch".
Remember to add a description for the commit:

        Screenshot: https://prnt.sc/ASTRnnvbqUNM

Git Pull from GitHub
  When working as a team on a project, it is important that everyone stays up to date.
  Any time you start working on a project, you should get the most recent changes to your local copy.

  With Git, you can do that with pull.

  pull is a combination of 2 different commands:

    > fetch
    > merge
    
  Let's take a closer look into how fetch, merge, and pull works.

Git Fetch
  fetch gets all the change history of a tracked branch/repo.
  So, on your local Git, fetch updates to see what has changed on GitHub:
-----------------------------------------------------------------------------------
command:

git fetch origin  

result: Check this Screenshot: https://prnt.sc/aY5HaKG53CFR
------------------------------------------------------------------------------------

Now that we have the recent changes, we can check our status:

    Screenshot: https://prnt.sc/RqhbvGeWSBU4

We are behind the origin/master by 1 commit. That should be the updated README.md, but lets double check by viewing the log:
-----------------------------------------------------------------------------------
command:

git log origin/master  

result: Check this Screenshot: https://prnt.sc/gDN0fvl_6T4n
------------------------------------------------------------------------------------

That looks as expected, but we can also verify by showing the differences between our local master and origin/master(আমরা আমাদের local master এবং origin/master এর মধ্যে পার্থক্য দেখিয়েও যাচাই করতে পারি):
-----------------------------------------------------------------------------------
command:

git log origin/master  

result: Check this Screenshot: https://prnt.sc/wAcxAQByHjG6 and https://prnt.sc/wKCjE8jBjmO8
------------------------------------------------------------------------------------

That looks precisely as expected! Now we can safely merge.

Git Merge
  merge combines the current branch, with a specified branch.
  We have confirmed that the updates are as expected, and we can merge our current branch (master) with origin/master:
-----------------------------------------------------------------------------------
command:

git merge origin/master  

result: Check this Screenshot: https://prnt.sc/8CcPid61d_Fb
------------------------------------------------------------------------------------

Check our status again to confirm we are up to date:
    Screenshot: https://prnt.sc/BtybXNFvYr_3

There! Your local git is up to date!

Git Pull
  But what if you just want to update your local repository, without going through all those steps?
  pull is a combination of fetch and merge. It is used to pull all changes from a remote repository into the branch you are working on.

  Make another change to the Readme.md file on GitHub.
    Screenshot: https://prnt.sc/-SciKKokkWjs
  
  Use pull to update our local Git:
-----------------------------------------------------------------------------------
command:

git merge origin/master  

result: update our local Git from GitHub
------------------------------------------------------------------------------------

That is how you keep your local Git up to date from a remote repository. In the next chapter, we will look closer at how push works on GitHub.

Git Push to GitHub
  Let's try making some changes to our local git and pushing them to GitHub.

  Commit the changes:
-----------------------------------------------------------------------------------
command:

git commit -a -m "push git.txt file"  

result: Check Screenshot: https://prnt.sc/xiTHyFlTiDpn
------------------------------------------------------------------------------------

And check the status:
  Screenshot: https://prnt.sc/y4gkOXJmjivr

Now push our changes to our remote origin:
-----------------------------------------------------------------------------------
command:

git push origin  

result: Check Screenshot: https://prnt.sc/xiTHyFlTiDpn
------------------------------------------------------------------------------------
Go to GitHub, and confirm that the repository has a new commit:
  Screenshot: https://prnt.sc/aX6Swkjcipur

Now, we are going to start working on branches on GitHub.

Create a New Branch on GitHub
  On GitHub, access your repository and click the "master" branch button.
  There you can create a new Branch. Type in a descriptive name, and click Create branch:
    Screenshot: https://prnt.sc/u_ev9GjWXz4r

The branch should now be created and active. You can confirm which branch you are working on by looking at the branch button. See that it now says "html-skeleton" instead of "main"?
  Screenshot: https://prnt.sc/ixgWPNfkIT2T

Start working on an existing file in this branch. Click the "index.html" file and start editing:
  Screenshot: https://prnt.sc/A7te2nu5RSBz

After you have finished editing the file, you can click the "Preview changes" tab to see the changes you made highlighted:
  Screenshot: https://prnt.sc/1X21wAwm7FS5

If you are happy with the change, add a comment that explains what you did, and click Commit changes.
You now have a new branch on GitHub, updated with some changes!

Pulling a Branch from GitHub
  Now continue working on our new branch in our local Git.
  Lets pull from our GitHub repository again so that our code is up-to-date:

-----------------------------------------------------------------------------------
command:

git pull  

result: Already Up to Date
------------------------------------------------------------------------------------

Now our main branch is up todate. And we can see that there is a new branch available on GitHub.
Do a quick status check:
    Screenshot: https://prnt.sc/7Mi8Rk-dbySH

And confirm which branches we have, and where we are working at the moment:
-----------------------------------------------------------------------------------
command:

git branch 

result: *master
------------------------------------------------------------------------------------

So, we do not have the new branch on our local Git. But we know it is available on GitHub. So we can use the -a option to see all local and remote branches:
-----------------------------------------------------------------------------------
command:

git branch -a

result: *master
         remote/origin/main
         remote/origin/master
         remote/origin/new-branch
------------------------------------------------------------------------------------

Note: branch -r is for remote branches only.
-----------------------------------------------------------------------------------
command:

git branch -r

result:  remote/origin/main
         remote/origin/master
         remote/origin/new-branch
------------------------------------------------------------------------------------

We see that the branch html-skeleton is available remotely, but not on our local git. Lets check it out:
-----------------------------------------------------------------------------------
command:

git checkout new-branch

result: Screenshot: https://prnt.sc/2z8lJjtkCWjU
------------------------------------------------------------------------------------

And check if it is all up to date:
-----------------------------------------------------------------------------------
command:

git pull

result: Already up to date.
------------------------------------------------------------------------------------

Now, open your favourite editor and confirm that the changes from the GitHub branch carried over.

That is how you pull a GitHub branch to your local Git.

Push a Branch to GitHub
  Let's try to create a new local branch, and push that to GitHub.
  Start by creating a branch, like we did earlier: